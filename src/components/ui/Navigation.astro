---
import HeaderLink from '../text/HeaderLink.astro'
import Hamburger from '../../assets/icons/hamburger.svg'
import Chevron from '../../assets/icons/chevron.svg'
import { NAVIGATION } from '../../consts'
import LogoFade from '../../assets/images/logo-fade.svg'
---

<nav id="main-nav" class="fixed top-0 left-0 right-0 z-50 bg-base-100/80 glass">
  <div class="navbar wrapper h-(--nav-height) px-(--site-padding-base)">
    <!-- Mobile navigation and logo -->
    <div class="navbar-start">
      <div class="flex items-center gap-2">
        <button
          id="mobile-nav-open"
          aria-label="open sidebar"
          class="lg:hidden btn btn-square btn-ghost"
        >
          <Hamburger class="w-6 h-6" />
        </button>
        <a href="/" aria-label="Home" title="Home">
          <h1>
            <span class="sr-only">Madison Lymphatics and Manual Therapy</span>

            <!-- logo -->
            <LogoFade class="max-w-24 md:max-w-28" />
          </h1>
        </a>
      </div>

      <!-- Drawer -->
      <input id="my-drawer-nav" type="checkbox" class="drawer-toggle" />
      <div class="drawer-side">
        <button id="mobile-nav-close" aria-label="close sidebar" class="drawer-overlay"></button>
        <ul class="menu min-h-full w-80 gap-2 border-r-2 border-base-200 bg-base-100 p-4">
          {
            NAVIGATION.map((link) => {
              if (link.children) {
                return (
                  <li aria-label={link.label}>
                    <span class="a menu-title text-base-content">{link.label}</span>
                    <ul class="menu gap-2">
                      {link.children.map((child) => (
                        <li class="text-base-content">
                          <HeaderLink href={child.href} aria-label={child.label}>
                            {child.label}
                          </HeaderLink>
                        </li>
                      ))}
                    </ul>
                  </li>
                )
              } else {
                return (
                  <li class="text-base-content">
                    <HeaderLink href={link.href} aria-label={link.label}>
                      {link.label}
                    </HeaderLink>
                  </li>
                )
              }
            })
          }
        </ul>
      </div>
    </div>

    <!-- Desktop navigation -->
    <div class="navbar-center hidden lg:flex">
      <ul class="menu menu-horizontal">
        {
          NAVIGATION.map((link) => {
            if (link.children) {
              return (
                <li>
                  <details class="dropdown">
                    <summary class="flex items-center gap-1 list-none font-nuckle-semibold">
                      {link.label}
                      <Chevron
                        class="w-4 h-4 transition-transform duration-200 ease-in-out"
                        aria-hidden="true"
                      />
                    </summary>
                    <ul
                      class="dropdown-content left-4 menu rounded-box shadow-sm bg-base-100 z-10 w-64 p-2"
                      role="menu"
                    >
                      {link.children.map((child) => (
                        <li role="none">
                          <HeaderLink href={child.href} role="menuitem">
                            {child.label}
                          </HeaderLink>
                        </li>
                      ))}
                    </ul>
                  </details>
                </li>
              )
            } else {
              return (
                <li>
                  <HeaderLink href={link.href}>{link.label}</HeaderLink>
                </li>
              )
            }
          })
        }
      </ul>
    </div>

    <!-- CTA -->
    <div class="navbar-end">
      <a href="/contact" class="btn btn-primary">Book Now</a>
    </div>
  </div>
</nav>

<script>
  // Mobile navigation toggle function
  function toggleMobileNav() {
    const drawerToggle = document.getElementById('my-drawer-nav') as HTMLInputElement

    if (drawerToggle) {
      drawerToggle.checked = !drawerToggle.checked
    }
  }

  // Set up mobile navigation event listeners
  function initMobileNav() {
    const openButton = document.getElementById('mobile-nav-open')
    const closeButton = document.getElementById('mobile-nav-close')

    if (openButton) {
      openButton.addEventListener('click', toggleMobileNav)
    }

    if (closeButton) {
      closeButton.addEventListener('click', toggleMobileNav)
    }
  }

  // Helper function to open a dropdown with animation
  function openDropdown(details: HTMLDetailsElement) {
    const content = details.querySelector('.dropdown-content') as HTMLElement
    const chevron = details.querySelector('svg')

    details.open = true

    if (content) {
      // Force a reflow to ensure the element is visible before animating
      content.offsetHeight

      requestAnimationFrame(() => {
        content.style.opacity = '1'
        content.style.transform = 'translateY(0) scale(1)'
      })
    }

    if (chevron) {
      chevron.classList.add('rotate-180')
    }
  }

  // Helper function to close a dropdown with animation
  function closeDropdown(details: HTMLDetailsElement) {
    const content = details.querySelector('.dropdown-content') as HTMLElement
    const chevron = details.querySelector('svg')

    if (content) {
      content.style.opacity = '0'
      content.style.transform = 'translateY(-8px) scale(0.95)'
    }

    if (chevron) {
      chevron.classList.remove('rotate-180')
    }

    setTimeout(() => {
      details.open = false
    }, 200)
  }

  // Handle chevron rotation and animations for dropdown menus
  function initDropdownChevrons() {
    const detailsElements = document.querySelectorAll(
      'details.dropdown'
    ) as NodeListOf<HTMLDetailsElement>

    detailsElements.forEach((details) => {
      const content = details.querySelector('.dropdown-content') as HTMLElement

      if (content) {
        // Prevent default details behavior for smooth animations
        details.addEventListener('click', (e) => {
          // Only handle clicks on the <summary> element
          const summary = details.querySelector('summary')

          if (e.target === summary || summary?.contains(e.target as Node)) {
            e.preventDefault()

            // Just toggle this dropdown - document listener will close others
            if (details.open) {
              closeDropdown(details)
            } else {
              openDropdown(details)
            }
          }
        })
      }
    })

    // Close dropdowns when clicking outside (with event delegation)
    document.addEventListener('click', (e) => {
      const target = e.target as Node
      detailsElements.forEach((details) => {
        if (details.open && !details.contains(target)) {
          closeDropdown(details)
        }
      })
    })
  }

  // Initialize all navigation functionality
  initMobileNav()
  initDropdownChevrons()
</script>

<style>
  /* Hide default markers and ensure content is hidden when closed */
  details.dropdown summary::-webkit-details-marker,
  details.dropdown summary::marker,
  details.dropdown summary::after,
  details.dropdown summary::before {
    display: none;
  }

  details.dropdown:not([open]) .dropdown-content {
    display: none;
  }

  /* Dropdown content transitions */
  details.dropdown .dropdown-content {
    transition:
      opacity 0.2s ease-out,
      transform 0.2s ease-out;
    transform-origin: top center;
    opacity: 0;
    transform: translateY(-8px) scale(0.95);
  }
</style>
